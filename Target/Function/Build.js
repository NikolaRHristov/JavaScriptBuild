var p=async(...[s,a])=>{for(const e of s)for(const l of await(await import("fast-glob")).default(e.replaceAll("'","").replaceAll('"',""),{ignore:a?.Exclude??[]}))r.push(l);r.reverse();const t=(await import("../Variable/ESBuild.js")).default;i(t,{entryPoints:r}),a?.ESBuild&&i(t,await(await import("./File.js")).default(a.ESBuild)),i(t,{tsconfig:a?.TypeScript??"tsconfig.json"}),!t.plugins&&!Array.isArray(t.plugins)&&(t.plugins=[]),t.plugins?.push({name:"TypeScript",setup({onEnd:e}){e(async()=>{await o(`tsc -p ${t.tsconfig}`),await o(`tsc-alias -f -p ${t.tsconfig}`)})}}),a?.Watch?await(await(await import("esbuild")).context(t)).watch():console.log(await(await import("esbuild")).analyzeMetafile((await(await import("esbuild")).build(t))?.metafile??"",{verbose:!0}))};const{default:o}=await import("../Function/Exec.js"),{default:i}=await import("../Function/Merge.js"),r=[],{extname:c,basename:f,relative:u,dirname:n,normalize:m,sep:w}=await import("path"),g=(await import("url")).fileURLToPath(n(import.meta.url));export{g as Current,o as Exec,i as Merge,r as Pipe,f as basename,p as default,n as dirname,c as extname,m as normalize,u as relative,w as sep};
