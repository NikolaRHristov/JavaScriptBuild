var u=async(...[s,e])=>{s.forEach(async t=>(await(await import("fast-glob")).default(t.replaceAll("'","").replaceAll('"',""))).forEach(c=>r.push(c))),r.reverse();const o=l((await import("../Object/ESBuild.js")).default,{entryPoints:Object.fromEntries(r.map(t=>[t.replace("Source/","").split(".").slice(0,-1).join("."),t]))}),{metafile:p}=await(await import("esbuild")).build(e?.ESBuild?l(o,await(await import("../Function/File.js")).default(e?.ESBuild)):o);console.log(p?await(await import("esbuild")).analyzeMetafile(p,{verbose:!0}):{}),e?.TypeScript?i(`tsc -p ${e?.TypeScript}`):i("tsc"),i(`typedoc 			--commentStyle all 			--gitRevision main 			--customCss ${a(`${n}/../Sheet/TypeDoc.css`)} 			--includeVersion 			--out ./Documentation 			--plugin typedoc-plugin-remove-references 			--plugin typedoc-plugin-rename-defaults 			--plugin typedoc-plugin-mdn-links 			--plugin typedoc-plugin-zod 			--plugin typedoc-plugin-merge-modules 			--entryPointStrategy expand 			--mergeModulesRenameDefaults 			--mergeModulesMergeMode module 			--entryPoints ${Object.values(o.entryPoints).join(" --entryPoints ")} && 			cp ${a(`${n}/../../Target/Function/Worker.js`)} ./Documentation/_worker.js && 			cp ${a(`${n}/../Notation/wrangler.toml`)} ./Documentation/wrangler.toml`)};const{default:i}=await import("../Function/Exec.js"),{deepmerge:l}=await import("deepmerge-ts"),{resolve:a}=await import("path"),r=[],n=(await import("url")).fileURLToPath((await import("path")).dirname(import.meta.url));export{n as Current,i as Exec,r as Pipe,l as deepmerge,u as default,a as resolve};
