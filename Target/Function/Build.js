var p=async(...[s,e])=>{for(const a of s)for(const l of await(await import("fast-glob")).default(a.replaceAll("'","").replaceAll('"',""),{ignore:e?.Exclude??[]}))o.push(l);o.reverse();let t=i((await import("../Variable/ESBuild.js")).default,{entryPoints:o});console.log(t),t=i(e?.ESBuild?i(t,await(await import("./File.js")).default(e.ESBuild)):t,{tsconfig:e?.TypeScript??"tsconfig.json"}),t.plugins?.push({name:"TypeScript",setup({onEnd:a}){a(async()=>{await r(`tsc -p ${t.tsconfig}`),await r(`tsc-alias -f -p ${t.tsconfig}`)})}}),e?.Watch?await(await(await import("esbuild")).context(t)).watch():console.log(await(await import("esbuild")).analyzeMetafile((await(await import("esbuild")).build(t))?.metafile??"",{verbose:!0}))};const{default:r}=await import("../Function/Exec.js"),{default:i}=await import("../Function/Merge.js"),o=[],{extname:c,basename:f,relative:m,dirname:n,normalize:u,sep:w}=await import("path"),d=(await import("url")).fileURLToPath(n(import.meta.url));export{d as Current,r as Exec,i as Merge,o as Pipe,f as basename,p as default,n as dirname,c as extname,u as normalize,m as relative,w as sep};
