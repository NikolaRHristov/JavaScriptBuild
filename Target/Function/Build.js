var c=async(...[s,a])=>{for(const e of s)for(const l of await(await import("fast-glob")).default(e.replaceAll("'","").replaceAll('"',""),{ignore:a?.Exclude??[]}))i.push(l);i.reverse(),console.log(i);let t=r((await import("../Variable/ESBuild.js")).default,{entryPoints:Object.fromEntries(i.map(e=>[e.replace("Source/","").replace("src/","").split(".").slice(0,-1).join("."),e]))});t=r(a?.ESBuild?r(t,await(await import("./File.js")).default(a.ESBuild)):t,{tsconfig:a?.TypeScript??"tsconfig.json"}),t.plugins?.push({name:"TypeScript",setup({onEnd:e}){e(async()=>{await o(`tsc -p ${t.tsconfig}`),await o(`tsc-alias -f -p ${t.tsconfig}`)})}}),a?.Watch?await(await(await import("esbuild")).context(t)).watch():console.log(await(await import("esbuild")).analyzeMetafile((await(await import("esbuild")).build(t))?.metafile??"",{verbose:!0}))};const{default:o}=await import("../Function/Exec.js"),{default:r}=await import("../Function/Merge.js"),i=[],p=(await import("url")).fileURLToPath((await import("path")).dirname(import.meta.url));export{p as Current,o as Exec,r as Merge,i as Pipe,c as default};
